{"version":3,"sources":["context/alert/alertContext.js","context/firebase/firebaseContext.js","components/Form.js","components/Notes.js","components/Loader.js","pages/Home.js","pages/About.js","components/Navbar.js","components/Alert.js","context/alert/alertReducer.js","context/alert/AlertState.js","context/firebase/firebaseReducer.js","context/firebase/FirebaseState.js","App.js","serviceWorker.js","index.js"],"names":["AlertContext","createContext","FirebaseContext","Form","useState","value","setValue","alert","useContext","firebase","onSubmit","event","preventDefault","trim","addNote","then","show","catch","className","type","placeholder","onChange","e","target","Notes","notes","onRemove","TransitionGroup","component","map","note","CSSTransition","key","id","classNames","timeout","title","data","onClick","Loader","role","Home","loading","fetchNotes","removeNote","useEffect","About","Navbar","to","exact","Alert","hide","in","visible","enter","exit","mountOnEnter","unmountOnExit","text","aria-label","aria-hidden","handlers","state","payload","alertReducer","action","DEFAULT","AlertState","children","useReducer","dispatch","Provider","setTimeout","firebaseReducer","filter","instance","axios","create","baseURL","FirebaseState","showLoader","a","get","res","Object","keys","Date","toLocaleString","post","name","Error","message","delete","App","path","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","error","console"],"mappings":"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","file":"static/js/main.c34efd28.chunk.js","sourcesContent":["import {createContext} from 'react'\r\n\r\nexport const AlertContext = createContext()","import {createContext} from \"react\";\r\n\r\nexport const FirebaseContext = createContext()","import React, {useContext, useState} from \"react\";\r\nimport {AlertContext} from \"../context/alert/alertContext\";\r\nimport {FirebaseContext} from \"../context/firebase/firebaseContext\";\r\n\r\nexport const Form = () => {\r\n  const [value, setValue] = useState('')\r\n  const alert = useContext(AlertContext)\r\n  const firebase = useContext(FirebaseContext)\r\n\r\n  const submitHandler = event => {\r\n    event.preventDefault()\r\n\r\n    if (value.trim()) {\r\n      firebase.addNote(value.trim()).then(() => {\r\n        alert.show('Заметка создана' , 'success')\r\n      }).catch(() => {\r\n        alert.show('Что-то пошло не так :(', 'danger')\r\n      })\r\n      setValue('')\r\n    } else {\r\n      alert.show('Введите название заметки')\r\n    }\r\n  }\r\n  return (\r\n    <form onSubmit={submitHandler}>\r\n      <div className=\"form-group\">\r\n        <input\r\n          type=\"text\"\r\n          className=\"form-control\"\r\n          placeholder=\"Введите название заметки\"\r\n          value={value}\r\n          onChange={e => setValue(e.target.value)}\r\n        />\r\n      </div>\r\n    </form>\r\n  )\r\n}","import React from \"react\";\r\nimport {CSSTransition, TransitionGroup} from \"react-transition-group\";\r\n\r\nexport const Notes = ({notes, onRemove, alert}) => (\r\n  <TransitionGroup component=\"ul\" className=\"list-group\">\r\n    {notes.map(note => (\r\n      <CSSTransition\r\n        key={note.id}\r\n        classNames={'note'}\r\n        timeout={800}\r\n        // mountOnEnter\r\n        // unmountOnExit\r\n      >\r\n        <li className=\"list-group-item note\">\r\n          <div>\r\n            <strong>{note.title}</strong>\r\n            <br/>\r\n            <small>{note.data}</small>\r\n          </div>\r\n\r\n          <button\r\n            onClick={() => {\r\n              onRemove(note.id)\r\n              alert.show('Заметка удалена', 'danger')}\r\n            }\r\n            type=\"button\"\r\n            className=\"btn btn-outline-danger btn-sm\"\r\n          >\r\n            &times;\r\n          </button>\r\n        </li>\r\n      </CSSTransition>\r\n    ))}\r\n  </TransitionGroup>\r\n)\r\n","import React from \"react\";\r\n\r\nexport const Loader = () => (\r\n  <div className=\"text-center\">\r\n    <div className=\"spinner-border m-5\" role=\"status\">\r\n      <span className=\"sr-only\">Loading...</span>\r\n    </div>\r\n  </div>\r\n)","import React, {useContext, useEffect} from \"react\";\r\nimport {Form} from \"../components/Form\";\r\nimport {Notes} from \"../components/Notes\";\r\nimport {FirebaseContext} from \"../context/firebase/firebaseContext\";\r\nimport {Loader} from \"../components/Loader\";\r\nimport {AlertContext} from \"../context/alert/alertContext\";\r\n\r\nexport const Home = () => {\r\n    const {loading, notes, fetchNotes, removeNote} = useContext(FirebaseContext)\r\n    const alert = useContext(AlertContext)\r\n\r\n  useEffect(() => {\r\n    fetchNotes()\r\n    // eslint-disable-next-line\r\n  }, [])\r\n\r\n  // const notes = new Array(3)\r\n  //   .fill('')\r\n  //   .map((_, i) => ({id: i, title: `Notes ${i + 1}`}))\r\n\r\n  return (\r\n    <>\r\n      <Form/>\r\n      <hr/>\r\n\r\n      {loading\r\n        ? <Loader/>\r\n        : <Notes notes={notes} onRemove={removeNote} alert={alert}/>\r\n      }\r\n    </>\r\n  )\r\n}","import React from \"react\";\r\n\r\nexport const About = () => (\r\n  <div className=\"jumbotron\">\r\n    <div className=\"container\">\r\n      <h1 className=\"display-4\">Note App</h1>\r\n      <p className=\"lead\">Version <strong>1.06</strong></p>\r\n    </div>\r\n  </div>\r\n)\r\n","import React from \"react\";\r\nimport {NavLink} from \"react-router-dom\";\r\n\r\nexport const Navbar = () => (\r\n  <nav className=\"navbar navbar-dark navbar-expand-lg bg-primary\">\r\n    <div className=\"navbar-brand\">\r\n      Note App\r\n    </div>\r\n    <ul className=\"navbar-nav\">\r\n      <li className=\"nav-item\">\r\n        <NavLink\r\n          className=\"nav-link\"\r\n          to=\"/\"\r\n          exact\r\n        >\r\n          Home\r\n        </NavLink>\r\n      </li>\r\n      <li className=\"nav-item\">\r\n        <NavLink\r\n          className=\"nav-link\"\r\n          to=\"/about\"\r\n        >\r\n          About\r\n        </NavLink>\r\n      </li>\r\n    </ul>\r\n  </nav>\r\n)","import React, {useContext} from \"react\";\r\nimport {AlertContext} from \"../context/alert/alertContext\";\r\nimport {CSSTransition} from \"react-transition-group\";\r\n\r\nexport const Alert = () => {\r\n  const {alert, hide} = useContext(AlertContext)\r\n// if (!alert.visible) {\r\n//   return null\r\n// }\r\n//     const onHide = () => {\r\n//       alert.hide('Заметка удалена')\r\n//     }\r\n\r\n  return (\r\n    <CSSTransition\r\n      in={alert.visible}\r\n      timeout={{\r\n        enter: 500,\r\n        exit: 350\r\n      }}\r\n      classNames={'alert'}\r\n      mountOnEnter\r\n      unmountOnExit\r\n    >\r\n      <div className={`alert alert-${alert.type || 'warning'} alert-dismissible`}>\r\n        <strong>Внимание!</strong>{alert.text}\r\n\r\n        <button onClick={hide} type=\"button\" className=\"close\" aria-label=\"Close\">\r\n          <span aria-hidden=\"true\">&times;</span>\r\n        </button>\r\n      </div>\r\n    </CSSTransition>\r\n  )\r\n}","export const SHOW_ALERT = 'SHOW_ALERT'\r\nexport const HIDE_ALERT = 'HIDE_ALERT'\r\n\r\n\r\n// export const alertReducer = (state, action) => {\r\n//   switch (action.type) {\r\n//     case SHOW_ALERT:\r\n//       return {\r\n//         ...state,\r\n//         ...action.payload, visible: true\r\n//       }\r\n//     case HIDE_ALERT:\r\n//       return  {\r\n//         ...state,\r\n//         visible: false\r\n//       }\r\n//     default:\r\n//       return state\r\n//   }\r\n// }\r\n\r\n\r\nconst handlers = {\r\n  [SHOW_ALERT]: (state, {payload}) => ({...payload, visible: true}),\r\n  [HIDE_ALERT]: state => ({...state, visible: false}),\r\n  DEFAULT: state => state\r\n}\r\n\r\nexport const alertReducer = (state, action) => {\r\n  const handle = handlers[action.type] || handlers.DEFAULT\r\n  return handle(state, action)\r\n}","import React, {useReducer} from 'react'\r\nimport {AlertContext} from \"./alertContext\";\r\nimport {alertReducer, HIDE_ALERT, SHOW_ALERT} from \"./alertReducer\";\r\n\r\n\r\nexport const AlertState = ({children}) => {\r\n  const [state, dispatch] = useReducer(alertReducer,{visible: false})\r\n\r\n  const show = (text, type = 'warning') => {\r\n    dispatch({\r\n      type: SHOW_ALERT,\r\n      payload: {text, type}\r\n    })\r\n    setTimeout(hide, 2500)\r\n  }\r\n  const hide = () => dispatch({type: HIDE_ALERT})\r\n  return(\r\n    <AlertContext.Provider value={{show, hide, alert: state}}>\r\n      {children}\r\n    </AlertContext.Provider>\r\n  )\r\n}\r\n\r\n\r\n","export const SHOW_LOADER = 'SHOW_LOADER'\r\nexport const ADD_NOTE = 'ADD_NOTE'\r\nexport const FETCH_NOTES = 'FETCH_NOTES'\r\nexport const REMOVE_NOTE = 'REMOVE_NOTE'\r\n\r\n\r\nexport const firebaseReducer = (state, action) => {\r\nswitch (action.type) {\r\n  case SHOW_LOADER:\r\n    return {\r\n      ...state, loading: true\r\n    }\r\n  case ADD_NOTE:\r\n    return {\r\n      ...state,\r\n      notes: [...state.notes, action.payload]\r\n    }\r\n  case FETCH_NOTES:\r\n    return {\r\n      ...state,\r\n      notes: action.payload, loading: false\r\n    }\r\n  case REMOVE_NOTE:\r\n    return {\r\n      ...state,\r\n      notes: state.notes.filter(note => note.id !== action.payload )\r\n    }\r\n\r\n  default:\r\n    return state\r\n}\r\n}","import React, {useReducer} from \"react\";\r\nimport {FirebaseContext} from \"./firebaseContext\";\r\nimport {ADD_NOTE, FETCH_NOTES, firebaseReducer, REMOVE_NOTE, SHOW_LOADER} from \"./firebaseReducer\";\r\nimport axios from \"axios\";\r\n\r\n// const url = process.env.REACT_APP_DB_URL\r\n\r\nexport const instance = axios.create({\r\n  baseURL: 'https://todo-react-06.firebaseio.com/',\r\n})\r\n\r\nexport const FirebaseState = ({children}) => {\r\n  const initialState = {\r\n    notes: [],\r\n    loading: false\r\n  }\r\n\r\n  const [state, dispatch] = useReducer(firebaseReducer, initialState)\r\n\r\n  const showLoader = () => dispatch({type: SHOW_LOADER})\r\n\r\n  const fetchNotes = async () => {\r\n    showLoader()\r\n    const res = await instance.get(`notes.json`)\r\n\r\n    const payload = Object.keys(res.data).map(key => {\r\n      return {\r\n        ...res.data[key],\r\n        id: key\r\n      }\r\n    })\r\n    dispatch({type: FETCH_NOTES, payload})\r\n  }\r\n\r\n  const addNote = async title => {\r\n    const note = {\r\n      title, data: new Date().toLocaleString()\r\n    }\r\n    try {\r\n      const res = await instance.post(`notes.json`, note)\r\n      const payload = {\r\n        ...note,\r\n        id: res.data.name\r\n      }\r\n      dispatch({type: ADD_NOTE, payload})\r\n    } catch (e) {\r\n      throw new Error(e.message)\r\n    }\r\n  }\r\n\r\n  const removeNote = async id => {\r\n    await instance.delete(`notes/${id}.json`)\r\n    dispatch({type: REMOVE_NOTE, payload: id})\r\n  }\r\n  return (\r\n    <FirebaseContext.Provider value={{\r\n      showLoader, addNote, fetchNotes, removeNote,\r\n      loading: state.loading,\r\n      notes: state.notes\r\n    }}>\r\n      {children}\r\n    </FirebaseContext.Provider>\r\n  )\r\n}","import React from 'react';\r\nimport {BrowserRouter, Route, Switch} from \"react-router-dom\";\r\nimport {Home} from \"./pages/Home\";\r\nimport {About} from \"./pages/About\";\r\nimport {Navbar} from \"./components/Navbar\";\r\nimport {Alert} from \"./components/Alert\";\r\nimport {AlertState} from \"./context/alert/AlertState\";\r\nimport {FirebaseState} from \"./context/firebase/FirebaseState\";\r\n\r\nfunction App() {\r\n  return (\r\n    <FirebaseState>\r\n      <AlertState>\r\n        <BrowserRouter>\r\n          <Navbar/>\r\n          <div className=\"container pt-4\">\r\n            <Alert/>\r\n            <Switch>\r\n              <Route path={'/'} exact component={Home}/>\r\n              <Route path={'/about'} component={About}/>\r\n            </Switch>\r\n          </div>\r\n        </BrowserRouter>\r\n      </AlertState>\r\n    </FirebaseState>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.sass';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}